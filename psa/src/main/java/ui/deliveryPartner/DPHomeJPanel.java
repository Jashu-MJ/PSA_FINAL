/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.deliveryPartner;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.example.BookingDirectory;
import org.example.Ecosystem;
import org.example.persona.DelPartner;
import org.example.dsa.DoublyLinkedListPriorityQueue;
import org.example.persona.Booking;
import org.example.persona.Customer;
import org.example.persona.Location;
import org.example.utils.DBConn;


/**
 *
 * @author marri
 */
public class DPHomeJPanel extends javax.swing.JPanel {

    Ecosystem es;
    javax.swing.JPanel CardSequencePanel;
    DelPartner dp;
    BookingDirectory bookingDirectory;
    /**
     * Creates new form DPHomeJPanel
     */
    public DPHomeJPanel(Ecosystem eco, JPanel clp, DelPartner dp) {
        this.es=eco;
        this.CardSequencePanel = clp;
        this.dp = dp;
        this.bookingDirectory = es.getBookingDirectory();
        initComponents();
        populateDPTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DP Home");

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Y", "N" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Delivery Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 17, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(jButton2)
                        .addGap(109, 109, 109))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(86, 86, 86))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            // Get the selected booking from the table
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        // No booking selected
        javax.swing.JOptionPane.showMessageDialog(this, "Please select a booking to update the Delivery Status.");
        return;
    }

    // Get the booking ID from the selected row
    String bookingID = jTable1.getValueAt(selectedRow, 0).toString();

    // Get the selected delivery partner from jComboBox2
    String deliveryStatus = jComboBox1.getSelectedItem().toString();

    // Find the booking with the booking ID
    Booking booking = bookingDirectory.getBookingById(bookingID);

    if (booking != null) {
        // Assign the selected delivery partner to the booking
        booking.setIsDelivered(deliveryStatus);

        // Update the booking directory
        bookingDirectory.updateBooking(booking);
        DBConn.updateDeliveryStatus(DBConn.establishConnection(), bookingID, deliveryStatus);
        

        // Show a confirmation message
        javax.swing.JOptionPane.showMessageDialog(this, "Delivery Status has been updated successfully.");

        // Refresh the booking table
        populateDPTable();
    } else {
        // Booking not found
        javax.swing.JOptionPane.showMessageDialog(this, "Booking not found.");
    }
        
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


private void populateDPTable() {
// Initialize the DoublyLinkedListPriorityQueue for Booking objects
    DoublyLinkedListPriorityQueue<Booking> priorityQueue = new DoublyLinkedListPriorityQueue<>();
    jLabel3.setText("Scheduled Deliveries For "+dp.getName());
    

    // Add all bookings from BookingDirectory to the priority queue
    if (bookingDirectory != null && bookingDirectory.getBookingList() != null) {
        for (Booking booking : bookingDirectory.getBookingList()) {
            if (booking.getDeliveryPersonId() != null && booking.getDeliveryPersonId().equals(dp.getId())) {
                priorityQueue.add(booking);
                }
            
        }
        
    }
       

    // Define columns for the table model
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Booking ID");
    model.addColumn("Customer Name");
    model.addColumn("Customer Phone");
    model.addColumn("Customer Address");
    model.addColumn("Meal ID");
    model.addColumn("Date of Delivery");
    model.addColumn("Time Slot");
    model.addColumn("Is Delivered");

    // Iterate through the priority queue and add rows to the model
    while (!priorityQueue.isEmpty()) {
        Booking booking = priorityQueue.remove();
        Customer c = es.getCustomerDirectory().findCustomer(booking.getCustomerId());
        Location cLoc = es.getLocDirectory().findLocationById(c.getLoc_id());
        String cAddr = cLoc.getStreetAddress() +", "+ cLoc.getCity() +", "+ cLoc.getState() +", "+ cLoc.getZipcode();
        model.addRow(new Object[]{
            booking.getBookId(),
            c.getName(),
            c.getPhone_number(),
            cAddr,
            booking.getMealId(),
            booking.getDateOfDelivery(),
            booking.getTimeSlot(),
            booking.isDelivered()
        });
    }

    // Set the model for the jTable1
    jTable1.setModel(model);
    }




}
